#!/usr/bin/env python
# Copyright(c) 2017-2019, Intel Corporation
#
# Redistribution  and  use  in source  and  binary  forms,  with  or  without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of  source code  must retain the  above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name  of Intel Corporation  nor the names of its contributors
#   may be used to  endorse or promote  products derived  from this  software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE
# IMPLIED WARRANTIES OF  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT  SHALL THE COPYRIGHT OWNER  OR CONTRIBUTORS BE
# LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR
# CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT LIMITED  TO,  PROCUREMENT  OF
# SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE,  DATA, OR PROFITS;  OR BUSINESS
# INTERRUPTION)  HOWEVER CAUSED  AND ON ANY THEORY  OF LIABILITY,  WHETHER IN
# CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import argparse
import struct
import fnmatch
import glob
import sys
import tempfile
import os
import fcntl
import filecmp
import stat
import re
import time
from array import array

VCP_ID = 0x0b30
VCP_PF1_ID = 0x0b32
VCP_EEPROM_SIZE = 0x10000
VCP_RPD_IMAGE_LENGTH = 0x77f0000
VCP_RPD_USER_IMAGE_OFFSET = 0x3ff0000
VCP_RPD_USER_IMAGE_LENGTH = 0x3800000
VCP_FLASH_OPT_OFFSET = 0x10000
VCP_FLASH_OPT_LENGTH = 0x10000
VCP_FLASH_DTB_OFFSET = 0x3820000
VCP_FLASH_DTB_LENGTH = 0x10000
VCP_FLASH_PAGE1_OFFSET = 0x4000000
VCP_FLASH_SECTOR_SIZE = 0x10000
MAX10_USER_FLASH_OFFSET = 0xb8000
MAX10_USER_FLASH_LENGTH = 0xa8000
USER_BOOT_PAGE = 0
FACTORY_BOOT_PAGE = 1

VCP_IMAGE_MAGIC_NUM1 = 0x2000862A
VCP_IMAGE_MAGIC_NUM2 = 0x0040666A
DTB_IMAGE_MAGIC_NUM = 0xd00dfeed
MAX10_IMAGE_MAGIC_NUM = 0x56565656

RSU_LOCK_FILE = "/tmp/rsu_lock"
f_lock = None


try:
    from intelhex import IntelHex
except ImportError:
    sys.exit('Missing intelhex. Install by: sudo pip install intelhex')


def check_rpd(ifile):
    data = ifile.read(0x20)
    pof_hdr = struct.unpack('IIIIIIII', data)
    for i in range(0, 3):
        if pof_hdr[i] != 0xffffffff:
            print "invalid rpd file"
            raise Exception

    if pof_hdr[3] != 0x6a6a6a6a:
        print "invalid rpd file"
        raise Exception

    return pof_hdr[4]


def reverse_bits(x, n):
    result = 0
    for i in xrange(n):
        if (x >> i) & 1:
            result |= 1 << (n - 1 - i)
    return result


def reverse_bits_in_file(ifile, ofile, len=0x80000000):
    bit_rev = array('B')
    for i in range(0, 256):
        bit_rev.append(reverse_bits(i, 8))

    while True:
        left_bytes = 4096 if len > 4096 else len
        ichunk = ifile.read(left_bytes)
        len -= left_bytes
        if not ichunk or len == 0:
            break

        ochunk = ''
        for b in ichunk:
            ochunk += chr(bit_rev[ord(b)])
        ofile.write(ochunk)


def get_flash_size(dev):

    MEMGETINFO = 0x80204d01

    ioctl_data = struct.pack('BIIIIIQ', 0, 0, 0, 0, 0, 0, 0)

    with os.fdopen(os.open(dev, os.O_SYNC | os.O_RDONLY), 'r') as file_:
        ret = fcntl.ioctl(file_.fileno(), MEMGETINFO, ioctl_data)

    ioctl_odata = struct.unpack_from('BIIIIIQ', ret)

    return ioctl_odata[2]


def flash_erase(dev, start, nbytes):
    MEMERASE = 0x40084d02
    ioctl_data = struct.pack('II', start, nbytes)
    with os.fdopen(os.open(dev, os.O_SYNC | os.O_RDWR), 'w') as file_:
        fcntl.ioctl(file_.fileno(), MEMERASE, ioctl_data)


def flash_write(dev, start, nbytes, ifile):
    last_write_position = start
    with os.fdopen(os.open(dev, os.O_SYNC | os.O_RDWR), 'a') as file_:
        os.lseek(file_.fileno(), start, os.SEEK_SET)

        while nbytes > 0:
            if nbytes > 4096:
                rbytes = 4096
            else:
                rbytes = nbytes

            ichunk = ifile.read(rbytes)

            if not ichunk:
                raise Exception("read of flash failed")

            if all([c == '\xFF' for c in ichunk]):
                os.lseek(file_.fileno(), rbytes, os.SEEK_CUR)
            else:
                os.write(file_.fileno(), ichunk)
                last_write_position = file_.tell()

            nbytes -= rbytes

    bytes_written = last_write_position - start
    return bytes_written


def flash_read(dev, start, nbytes, ofile):
    with os.fdopen(os.open(dev, os.O_RDONLY), 'r') as file_:
        os.lseek(file_.fileno(), start, os.SEEK_SET)

        while nbytes > 0:
            if nbytes > 4096:
                rbytes = 4096
            else:
                rbytes = nbytes

            ichunk = os.read(file_.fileno(), rbytes)

            if not ichunk:
                raise Exception("read of flash failed")

            ofile.write(ichunk)
            nbytes -= rbytes


def parse_args():
    descr = 'A tool to help update the flash used to configure an '
    descr += 'Intel FPGA at power up.'

    epi = 'flash programming types:\n\n'
    epi += '  user		FPGA user image update\n'
    epi += '  factory	FPGA factory image update\n'
    epi += '  rsu		Remote System Update (Board Reboot)\n'
    epi += '  dtb		Vista Creek device tree update\n'
    epi += '  eeprom	EEPROM update\n'
    epi += '  bmc_bl	Rush Creek BMC boot loader update\n'
    epi += '  bmc_app	Rush Creek BMC application update\n'
    epi += '  bmc_fw	BMC firmware update\n'
    epi += '  bmc_img	BMC image update\n\n'
    epi += 'example usage:\n\n'
    epi += '    fpgaflash user new_image.rpd 0000:04:00.0\n\n'

    fc_ = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(description=descr, epilog=epi,
                                     formatter_class=fc_)

    parser.add_argument('type', help='type of flash programming',
                        choices=['user', 'factory', 'rsu', 'dtb', 'eeprom',
                                 'bmc_bl', 'bmc_app', 'bmc_fw', 'bmc_img'])
    parser.add_argument('file', type=argparse.FileType('rb'),
                        help='file to program into flash')

    rsu_help = "perform remote system update after update"
    rsu_help += " causing the board to be rebooted"
    parser.add_argument('-r', '--rsu', action='store_true', help=rsu_help)

    no_verify_help = "do not read back flash and verify after writing"
    parser.add_argument('-n', '--no-verify', default=False,
                        action='store_true', help=no_verify_help)

    bdf_help = "bdf of device to program (e.g. 04:00.0 or 0000:04:00.0)"
    bdf_help += " optional when one device in system"

    parser.add_argument('bdf', nargs='?', help=bdf_help)
    return parser.parse_args()


def get_devid(bdf):
    filepath = os.path.join('/sys/bus/pci/devices', bdf, 'device')
    if not os.path.exists(filepath):
        print("WARNING: {} not found".format(filepath))
        return None
    with open(filepath, 'r') as fd:
        return fd.read().strip()


def get_fpga_sysfs_path(bdf):
    for fpga in glob.glob('/sys/class/fpga/*'):
        fpga_bdf = os.path.basename(os.readlink(os.path.join(fpga, "device")))
        if not fpga_bdf:
            continue
        if bdf == fpga_bdf:
            return fpga
    print("WARNING: fpga not found @ {}".format(bdf))
    return None


def get_spi_sysfs_path(bdf):
    fpga_path = get_fpga_sysfs_path(bdf)
    if not fpga_path:
        return None
    else:
        paths = glob.glob(os.path.join(fpga_path, 'intel-fpga-fme.*',
                                       'spi-altera.*', 'spi_master',
                                       'spi*', 'spi*.*'))
        if not paths:
            return None
        if len(paths) > 1:
            print("multiple spi found @ {}".format(bdf))
        return paths[0]


def get_flash_mode(bdf):
    spi_path = get_spi_sysfs_path(bdf)
    if not spi_path:
        return 0
    else:
        mode = []
        for prefix in ['fpga', 'bmcfw', 'bmcimg']:
            path = os.path.join(spi_path, '{}_flash_ctrl'.format(prefix),
                                '{}_flash_mode'.format(prefix))
            if os.path.exists(path):
                with open(path, 'r') as fd:
                    mode.append(int(fd.read(1)))
        return 1 if any(mode) else 0


def set_flash_mode(bdf, utype, value):
    spi_path = get_spi_sysfs_path(bdf)
    if spi_path:
        if utype in ['factory', 'user', 'dtb']:
            prefix = 'fpga'
        elif utype == 'bmc_fw':
            prefix = 'bmcfw'
        elif utype == 'bmc_img':
            prefix = 'bmcimg'
        else:
            return
        path = os.path.join(spi_path, '{}_flash_ctrl'.format(prefix),
                            '{}_flash_mode'.format(prefix))

        if os.path.exists(path):
            with open(path, 'w') as fd:
                fd.write(str(value))


def enable_mtd(bdf, utype):
    set_flash_mode(bdf, utype, 1)
    time.sleep(1)


def disable_mtd(bdf):
    for utype in ['user', 'bmc_fw', 'bmc_img']:
        set_flash_mode(bdf, utype, 0)


def get_mtd(bdf):
    spi_path = get_spi_sysfs_path(bdf)
    if not spi_path:
        return
    else:
        paths = glob.glob(os.path.join(spi_path, '*.*.auto',
                                       'mtd', 'mtd*'))
        if not paths:
            print("WARNING: mtd not found @ {}".format(bdf))
            return None
        for path in paths:
            if not fnmatch.fnmatchcase(path, "*ro"):
                break
        with open(os.path.join(path, 'dev'), 'r') as fd:
            id = fd.read().strip()
        mtd = '/dev/char/{}'.format(id)
        if not os.path.exists(mtd):
            print("WARNING: mtd {} not exists".format(mtd))
            return None
        return mtd


def get_bdf_mtd_mapping(utype, sbdf=None):
    bdf_map = dict()
    for fpga in glob.glob('/sys/class/fpga/*'):
        bdf = os.path.basename(os.readlink(os.path.join(fpga, "device")))
        if not bdf or (sbdf and sbdf != bdf):
            continue

        if int(get_devid(bdf), 16) == VCP_ID:
            enable_mtd(bdf, utype)
            mtd = get_mtd(bdf)
            if not mtd:
                disable_mtd(bdf)
            else:
                bdf_map[bdf] = mtd
        else:
            mtds = glob.glob(os.path.join(fpga, 'intel-fpga-fme.*',
                                          'altr-asmip2*', 'mtd', 'mtd*'))
            for mtd in mtds:
                if not fnmatch.fnmatchcase(mtd, "*ro"):
                    bdf_map[bdf] = os.path.join('/dev', os.path.basename(mtd))
                    break

    return bdf_map


def print_bdf_mtd_mapping(bdf_map):
    print "\nFPGA cards available for flashing:"

    for key in bdf_map.keys():
        print "    {}".format(key)

    print

    sys.exit(1)


def normalize_bdf(bdf):
    pat = r'[0-9a-fA-F]{4,}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}\.[0-9a-fA-F]$'
    if re.match(pat, bdf):
        return bdf

    if re.match(r'[0-9a-fA-F]{2}:[0-9a-fA-F]{2}\.[0-9a-fA-F]$', bdf):
        return "0000:{}".format(bdf)


def update_flash(update_type, ifile, mtd_dev, bdf, no_verify):

    flash_size = get_flash_size(mtd_dev)

    print "flash size is {} bytes".format(flash_size)

    if int(get_devid(bdf), 16) == VCP_ID:
        if update_type in ['factory', 'user']:
            ifile.seek(0)
            data = ifile.read(8)
            bin_hdr = struct.unpack('>II', data)
            if bin_hdr[0] != VCP_IMAGE_MAGIC_NUM1 or \
               bin_hdr[1] != VCP_IMAGE_MAGIC_NUM2:
                print "invalid image file"
                return 1
            ifile.seek(0, 2)
            image_len = ifile.tell()
            if image_len != VCP_RPD_IMAGE_LENGTH:
                print "invalid image length"
                return 1
            if update_type == 'factory':
                start_addr = 0
                image_len = VCP_RPD_IMAGE_LENGTH
            else:
                start_addr = VCP_RPD_USER_IMAGE_OFFSET
                image_len = VCP_RPD_USER_IMAGE_LENGTH
        elif update_type == 'dtb':
            start_addr = 0
            ifile.seek(0, 2)
            image_len = ifile.tell()
            ifile.seek(0)
            data = ifile.read(8)
            dtb_hdr = struct.unpack('>II', data)
            if dtb_hdr[0] != DTB_IMAGE_MAGIC_NUM:
                print "invalid dtb file"
                return 1
            if dtb_hdr[1] != image_len:
                print "invalid dtb length"
                return 1
        elif update_type == 'bmc_fw':
            try:
                ihex = IntelHex(ifile)
            except Exception as ex:
                print ex
                return 1
            for (start, size) in ihex.segments():
                print "segment: start 0x%x, size 0x%x" % (start, size)
            start_addr = start
            image_len = size
            bdata = ihex.tobinarray()
        elif update_type == 'bmc_img':
            start_addr = 0
            ifile.seek(0, 2)
            image_len = ifile.tell()
            if image_len != MAX10_USER_FLASH_LENGTH:
                print "invalid rpd length"
                return 1
            ifile.seek(0x8c)
            data = ifile.read(4)
            rpd_hdr = struct.unpack('I', data)
            if rpd_hdr[0] != MAX10_IMAGE_MAGIC_NUM:
                print "invalid rpd file"
                return 1
    else:
        try:
            start_addr = check_rpd(ifile)
        except Exception as ex:
            print ex
            return 1

        if update_type == 'factory':
            start_addr = 0

    ofile = tempfile.NamedTemporaryFile(mode='wb', delete=False)

    ifile.seek(start_addr)

    print "reversing bits"
    if int(get_devid(bdf), 16) == VCP_ID:
        if update_type in ['factory', 'user']:
            reverse_bits_in_file(ifile, ofile, image_len)
        elif update_type == 'dtb':
            ofile.write(ifile.read(image_len))
        elif update_type == 'bmc_fw':
            ofile.write(bdata)
        elif update_type == 'bmc_img':
            sfile = tempfile.NamedTemporaryFile(mode='wb+', delete=True)
            a = array("I", ifile.read())
            for elem in a:
                sfile.write(struct.pack('>I', elem))
            sfile.seek(0)
            reverse_bits_in_file(sfile, ofile, image_len)
            sfile.close()
    else:
        reverse_bits_in_file(ifile, ofile)

    ofile.close()

    print "erasing flash"
    if int(get_devid(bdf), 16) == VCP_ID:
        if update_type == 'factory':
            start_addr = VCP_FLASH_OPT_OFFSET
            flash_erase(mtd_dev, start_addr, image_len)
        elif update_type == 'user':
            start_addr = VCP_FLASH_PAGE1_OFFSET
            flash_erase(mtd_dev, start_addr, image_len)
        elif update_type == 'dtb':
            start_addr = VCP_FLASH_DTB_OFFSET
            flash_erase(mtd_dev, start_addr, VCP_FLASH_DTB_LENGTH)
        elif update_type == 'bmc_fw':
            for i in range(0, image_len, VCP_FLASH_SECTOR_SIZE):
                flash_erase(mtd_dev, i, VCP_FLASH_SECTOR_SIZE)
        elif update_type == 'bmc_img':
            start_addr = MAX10_USER_FLASH_OFFSET
            flash_erase(mtd_dev, start_addr, image_len)
    else:
        flash_erase(mtd_dev, start_addr, (flash_size - start_addr))

    nbytes = os.path.getsize(ofile.name)

    with open(ofile.name, 'rb') as rfile:
        print "writing flash"
        nbytes = flash_write(mtd_dev, start_addr, nbytes, rfile)

    with open(ofile.name, 'rw+') as rfile:
        rfile.truncate(nbytes)

    if not no_verify:
        vfile = tempfile.NamedTemporaryFile(mode='wb', delete=False)

        print "reading back flash"
        flash_read(mtd_dev, start_addr, nbytes, vfile)

        vfile.close()

        print "verifying flash"

        retval = filecmp.cmp(ofile.name, vfile.name)
        os.remove(ofile.name)
        os.remove(vfile.name)

        if retval:
            print "flash successfully verified"
            return 0
        else:
            print "failed to verify flash"
            return 2

    os.remove(ofile.name)

    print "flash successfully written"
    return 0


def erase_flash(update_type, ifile, mtd_dev, bdf):
    print "erasing flash"
    if int(get_devid(bdf), 16) == VCP_ID:
        if update_type == 'user':
            start_addr = VCP_FLASH_PAGE1_OFFSET
            image_len = VCP_RPD_USER_IMAGE_LENGTH
        elif update_type == 'bmc_img':
            start_addr = MAX10_USER_FLASH_OFFSET
            ifile.seek(0, 2)
            image_len = ifile.tell()
        flash_erase(mtd_dev, start_addr, image_len)


def fpga_update(utype, ifile, bdf, bdf_map, no_verify):
    mtd_dev = bdf_map[bdf]

    if not mtd_dev:
        return 1

    try:
        mode = os.stat(mtd_dev).st_mode
    except Exception as ex:
        print ex
        return 1

    if not stat.S_ISCHR(mode):
        print "{} is not a device file.".format(mtd_dev)
        return 1

    if utype == 'factory':
        msg = "Are you sure you want to perform a factory update? [Yes/No]"
        line = raw_input(msg)
        if line != "Yes":
            return 1

    ret = update_flash(utype, ifile, mtd_dev, bdf, no_verify)
    if ret == 2 and utype in ['user', 'bmc_img']:
        print "retrying flash"
        ret = update_flash(utype, ifile, mtd_dev, bdf, no_verify)
        if ret == 2:
            erase_flash(utype, ifile, mtd_dev, bdf)
            print "flash update failed"
    ifile.close()
    return ret


def get_dev_bmc(bdf):
    path = os.path.join('/sys/bus/pci/devices/', bdf,
                        'fpga/intel-fpga-dev.*/intel-fpga-fme.*',
                        'avmmi-bmc.*.auto')
    dirs = glob.glob(path)
    if len(dirs) < 1:
        print "The avmmi-bmc driver was not found."
        print "Driver or FIM may need to be upgraded."
        disable_mtd(bdf)
        sys.exit(1)

    if len(dirs) > 1:
        print "Catastrophic error! More than one avmmi-bmc driver found."
        disable_mtd(bdf)
        sys.exit(1)

    dev = os.path.join('/dev', os.path.basename(dirs[0]))

    mode = os.stat(dev).st_mode

    if not stat.S_ISCHR(mode):
        raise Exception("{} is not a device file.".format(dev))

    return dev


class BittwareBmc(object):

    BMC_IOCTL = 0xc0187600

    BW_ACT_APP_MAIN = 0x01
    BW_ACT_APP_BL = 0x02

    BW_DEV_FLASH = 0x00
    BW_DEV_EEPROM = 0x01

    BW_BL_CMD_HDR = [0xB8, 0x00, 0x64, 0x18, 0x7b, 0x00]
    BW_BL_MIN_RSP_LEN = 8  # includes completion code and BL result code

    BW_BL_CMD_VER = 0
    BW_BL_CMD_JUMP = 1
    BW_BL_CMD_READ = 2
    BW_BL_CMD_WRITE = 3

    BW_BL_READ_MAX = 512
    BW_BL_WRITE_MAX = 512
    BW_BL_PAGE_SIZE = 512

    BW_BL_HDR_SIZE = 16

    partitions = [
        {
            'name': 'main',
            'app': BW_ACT_APP_MAIN,
            'start': 0x00000,
            'hdr_start': 0x34FF0,
        },
        {
            'name': 'cfg',
            'app': BW_ACT_APP_MAIN,
            'start': 0x35000,
            'hdr_start': 0x38ff0,
        },
        {
            'name': 'bootloader',
            'app': BW_ACT_APP_BL,
            'start': 0x39000,
            'hdr_start': 0x40ff0,
        },
        {
            'name': 'bootloader_boot',
            'app': BW_ACT_APP_BL,
            'start': 0x41000,
            'hdr_start': 0x41770,
        },
        {
            'name': 'main_boot',
            'app': BW_ACT_APP_MAIN,
            'start': 0x41800,
            'hdr_start': 0x41ff0,
        },
    ]

    def __init__(self, dev_path, ifile):
        self.dev = dev_path
        self.fd_ = os.open(self.dev, os.O_SYNC | os.O_RDWR)
        self.ihex = IntelHex(ifile)
        self.ihex.padding = 0xff

    def verify_segments(self, utype):
        print self.ihex.segments()
        for (start, size) in self.ihex.segments():
            print "0x%x 0x%x" % (start, size)

    def bw_xact(self, txarray, rxlen):
        tx_buf = array('B', txarray)

        rx_buf = array('B')
        for _ in range(rxlen):
            rx_buf.append(0)

        xact = struct.pack('IHHQQ', 24,
                           tx_buf.buffer_info()[1], rx_buf.buffer_info()[1],
                           tx_buf.buffer_info()[0], rx_buf.buffer_info()[0])

        fcntl.ioctl(self.fd_, 0xc0187600, xact)

        if rx_buf[3] != 0:
            raise Exception("bad completion code 0x%x" % rx_buf[3])

        return rx_buf

    def bw_bl_xact(self, bltx, blrx):
        tx_buf = array('B', self.BW_BL_CMD_HDR)

        for elem in bltx:
            tx_buf.append(elem)

        rx_buf = self.bw_xact(tx_buf, blrx + self.BW_BL_MIN_RSP_LEN)

        if rx_buf[self.BW_BL_MIN_RSP_LEN - 1] != 0:
            raise Exception("bad BL result code 0x%x" %
                            rx_buf[self.BW_BL_MIN_RSP_LEN - 1])

        for _ in range(self.BW_BL_MIN_RSP_LEN):
            rx_buf.pop(0)

        return rx_buf

    def bl_version(self):

        rx_buf = self.bw_bl_xact([self.BW_BL_CMD_VER], 3)

        ver = rx_buf.pop(0)
        ver |= rx_buf.pop(0) << 8

        act = rx_buf.pop(0)

        if (act != self.BW_ACT_APP_MAIN) and (act != self.BW_ACT_APP_BL):
            raise Exception("bad active application 0x%x" % act)

        return ver, act

    def bl_jump_other(self, app):
        if (app != self.BW_ACT_APP_MAIN) and (app != self.BW_ACT_APP_BL):
            raise Exception("bad app %d" % app)

        self.bw_bl_xact([self.BW_BL_CMD_JUMP, app], 0)

        time.sleep(1)

        [ver, active] = self.bl_version()

        if active != app:
            raise Exception("failed to jump to app {}".format(app))
        else:
            print "successfully jumped to app {}".format(active)

    def bl_read(self, device, offset, count):
        if count > self.BW_BL_READ_MAX:
            raise Exception("bad count %d > %d" % (count, self.BW_BL_READ_MAX))

        if (device != self.BW_DEV_FLASH) and (device != self.BW_DEV_EEPROM):
            raise Exception("bad device %d" % device)

        txar = [self.BW_BL_CMD_READ, device,
                offset & 0xff, (offset >> 8) & 0xff,
                (offset >> 16) & 0xff, (offset >> 24) & 0xff,
                count & 0xff, (count >> 8) & 0xff]

        rx_buf = self.bw_bl_xact(txar, 2 + count)

        rx_cnt = rx_buf.pop(0)
        rx_cnt |= rx_buf.pop(0) << 8

        if (rx_cnt != count) or (rx_cnt != len(rx_buf)):
            raise Exception("bad rx_cnt 0x%x != 0x%x != 0x%x" %
                            (rx_cnt, count, len(rx_buf)))

        return rx_buf

    def bl_write(self, device, offset, txdata):
        count = len(txdata)

        if count > self.BW_BL_WRITE_MAX:
            raise Exception("bad len %d > %d" %
                            (count, self.BW_BL_WRITE_MAX))

        if (device != self.BW_DEV_FLASH) and (device != self.BW_DEV_EEPROM):
            raise Exception("bad device %d" % device)

        txar = [self.BW_BL_CMD_WRITE, device,
                offset & 0xff, (offset >> 8) & 0xff,
                (offset >> 16) & 0xff, (offset >> 24) & 0xff,
                count & 0xff, (count >> 8) & 0xff]

        for data in txdata:
            txar.append(data)

        rx_buf = self.bw_bl_xact(txar, 2)

        tx_cnt = rx_buf.pop(0)
        tx_cnt |= rx_buf.pop(0) << 8

        if tx_cnt != count:
            raise Exception("bad tx_cnt 0x%x != 0x%x" %
                            (tx_cnt, count))

    def verify_partition(self, part):
        print "verifying %s from 0x%x to 0x%x" % (
            part['name'], part['start'],
            part['hdr_start'] + self.BW_BL_HDR_SIZE)

        valid = True
        for offset in range(part['start'],
                            part['hdr_start'] + self.BW_BL_HDR_SIZE,
                            self.BW_BL_READ_MAX):

            rx_buf = self.bl_read(self.BW_DEV_FLASH, offset,
                                  self.BW_BL_READ_MAX)

            for i in range(self.BW_BL_READ_MAX):
                if rx_buf[i] != self.ihex[offset+i]:
                    print "mismatch at offset 0x%x 0x%x != 0x%x" % (
                        offset+i, rx_buf[i], self.ihex[offset+i])
                    valid = False

        return valid

    def verify_partitions(self, utype):
        valid = True
        for part in self.partitions:
            if part['app'] == utype:
                if not self.verify_partition(part):
                    valid = False

        return valid

    def write_range(self, ih, start, end):
        for offset in range(start, end, self.BW_BL_WRITE_MAX):

            data = []
            for i in range(offset, offset+self.BW_BL_WRITE_MAX):
                data.append(ih[i])

            print "    0x%x - 0x%x %d" % (
                offset, offset + self.BW_BL_WRITE_MAX, len(data))
            self.bl_write(self.BW_DEV_FLASH, offset, data)

    def write_page0(self):
        ih = IntelHex()
        jump_bl_instrs = [0x82, 0xe0, 0x8c, 0xbf, 0xe0, 0xe0, 0xf0, 0xe0,
                          0x19, 0x94, 0x0c, 0x94, 0x00, 0x00, 0xff, 0xcf]
        for i in range(len(jump_bl_instrs)):
            ih[i] = jump_bl_instrs[i]

        self.write_range(ih, 0, self.BW_BL_PAGE_SIZE)

    def write_partitions(self, utype):
        wrote_page0 = False
        for part in self.partitions:
            if part['app'] == utype:
                start = part['start']
                print "updating %s from 0x%x to 0x%x" % (
                    part['name'], start,
                    part['hdr_start'] + self.BW_BL_HDR_SIZE)

                if part['start'] == 0:
                    self.write_page0()
                    start = self.BW_BL_PAGE_SIZE
                    wrote_page0 = True

                self.write_range(self.ihex, start,
                                 part['hdr_start'] + self.BW_BL_HDR_SIZE)
        if wrote_page0:
            self.write_range(self.ihex, 0, self.BW_BL_PAGE_SIZE)


def bmc_update(utype, ifile, bdf):
    dev = get_dev_bmc(bdf)

    bw_bmc = BittwareBmc(dev, ifile)

    ver, active = bw_bmc.bl_version()

    print "ver %d act %d" % (ver, active)

    if utype == 'bmc_bl':
        bw_bmc.verify_segments(bw_bmc.BW_ACT_APP_BL)

        if active != bw_bmc.BW_ACT_APP_MAIN:
            bw_bmc.bl_jump_other(bw_bmc.BW_ACT_APP_MAIN)

        bw_bmc.write_partitions(bw_bmc.BW_ACT_APP_BL)
        bw_bmc.verify_partitions(bw_bmc.BW_ACT_APP_BL)
    elif utype == 'bmc_app':
        bw_bmc.verify_segments(bw_bmc.BW_ACT_APP_MAIN)

        if active != bw_bmc.BW_ACT_APP_BL:
            bw_bmc.bl_jump_other(bw_bmc.BW_ACT_APP_BL)
        bw_bmc.write_partitions(bw_bmc.BW_ACT_APP_MAIN)
        bw_bmc.verify_partitions(bw_bmc.BW_ACT_APP_MAIN)
        bw_bmc.bl_jump_other(bw_bmc.BW_ACT_APP_MAIN)
    else:
        raise Exception("unknown utype: %s" % utype)

    return 0


def read_root_ports(path):
    p = re.compile(r'\d{4}:(?P<bus>\w{2}):(?P<device>\d{2})\.(?P<function>\d)')
    try:
        symlink = os.readlink(path)
    except Exception as ex:
        return ([], None)
    m = p.findall(symlink)
    ports = []
    for n in m:
        ports.append('{}:{}.{}'.format(*n))
    up_port = ports[-3]

    # search other devices root path
    if len(ports) > 2:
        paths = glob.glob(os.path.join('/sys/bus/pci/devices',
                                       '*:' + up_port, '*:*:*.*', '*:*:*.*',
                                       'device'))
        for devpath in paths:
            with open(devpath, 'r') as fd:
                devid = fd.read().strip()
                m = p.findall(devpath)
                for n in m:
                    port = '{}:{}.{}'.format(*n)
                    if port not in ports:
                        ports.append(port)

    return (ports, up_port)


def set_aer(port, mask):
    r = os.system("setpci -s {} ECAP_AER+0x08.L={:#x} > /dev/null 2>&1".
                  format(port, mask))
    if r != 0 and r != 256:     # value 256 means AER capability is not support
        return 1
    r = os.system("setpci -s {} ECAP_AER+0x14.L={:#x} > /dev/null 2>&1".
                  format(port, mask))
    if r != 0 and r != 256:     # value 256 means AER capability is not support
        return 1
    return 0


def disable_aer(port):
    return set_aer(port, 0xFFFFFFFF)


def enable_aer(port):
    return set_aer(port, 0x00000000)


def write_sysfs_node(path, value):
    if not os.path.exists(path):
        print("WARNING: {} not found".format(path))
        return 1
    with open(path, 'w') as fd:
        fd.write(str(value))
        return 0


def trigger_rsu(bdf, boot_page):
    spi_path = get_spi_sysfs_path(bdf)
    if not spi_path:
        return 1
    else:
        path = os.path.join(spi_path, 'bmcimg_flash_ctrl', 'bmcimg_image_load')
        value = 0 if boot_page == USER_BOOT_PAGE else 1
        return write_sysfs_node(path, value)


def remove_device(bdf):
    path = os.path.join('/sys/bus/pci/devices', bdf, 'remove')
    return write_sysfs_node(path, 1)


def rescan_device(bdf):
    rescan_path = '/sys/bus/pci/devices/{}/rescan'.format(normalize_bdf(bdf))
    return write_sysfs_node(rescan_path, 1)


def eeprom_update(ifile, bdf):
    ret = 0
    fpga_path = get_fpga_sysfs_path(bdf)
    if not fpga_path:
        return 1
    nvmem_path = glob.glob(os.path.join(fpga_path, 'intel-fpga-fme.*',
                                        'altera-i2c.*.auto', 'i2c-*',
                                        '*-*', '*-*', 'nvmem'))
    if len(nvmem_path) == 1:
        with open(nvmem_path[0], 'wb') as wfile:
            wfile.write(ifile.read(VCP_EEPROM_SIZE))
    elif len(nvmem_path) > 1:
        print "multiple nvmem found"
        ret = 1
    else:
        eeprom_path = glob.glob(os.path.join(fpga_path, 'intel-fpga-fme.*',
                                             'altera-i2c.*.auto', 'i2c-*',
                                             '*-*', 'eeprom'))
        if len(eeprom_path) >= 1:
            with open(eeprom_path[0], 'wb') as wfile:
                wfile.write(ifile.read(VCP_EEPROM_SIZE))
        else:
            print "no nvmem or eeprom found"
            ret = 1
    return ret


def update_bdf(port):
    p = re.compile(r'\d{4}:(?P<bus>\w{2}):(?P<device>\d{2})\.(?P<function>\d)')
    paths = glob.glob(os.path.join('/sys/bus/pci/devices', '*:' + port,
                                   '*:*:*.*', '*:*:*.*', 'device'))
    ports = []
    for devpath in paths:
        with open(devpath, 'r') as fd:
            devid = fd.read().strip()
            if int(devid, 16) == VCP_ID:
                m = p.findall(devpath)
                for n in m:
                    ports.append('{}:{}.{}'.format(*n))

    if len(ports) == 0:
        print "fpga is not found after reloading"
        return None
    else:
        return normalize_bdf(ports[-1])


def acquire_rsu_lock():
    global f_lock
    if not os.path.exists(RSU_LOCK_FILE):
        with open(RSU_LOCK_FILE, "w") as f:
            f.write("0")
    try:
        f_lock = open(RSU_LOCK_FILE, "r+")
    except Exception as ex:
        print ex
        return 1
    fcntl.flock(f_lock.fileno(), fcntl.LOCK_EX)
    return 0


def release_rsu_lock():
    global f_lock
    if f_lock:
        f_lock.close()


def do_rsu(bdf, boot_page):
    ret = acquire_rsu_lock()
    if ret == 1:
        print "failed to get rsu lock, please reboot board to complete rsu"
        return ret
    bdf = normalize_bdf(bdf)
    devid = get_devid(bdf)
    if devid is None:
        return 1
    if int(devid, 16) == VCP_ID:
        print "performing remote system update"
        (ports, up_port) = read_root_ports(os.path.join('/sys/bus/pci/drivers',
                                                        'intel-fpga-pci', bdf))
        if len(ports) > 0:
            pf1_bdf = normalize_bdf(ports[-1])
            for p in ports:
                ret = disable_aer(p)
                if ret != 0:
                    sys.exit(ret)
            ret = trigger_rsu(bdf, boot_page)
            if ret == 0:
                ret = remove_device(normalize_bdf(up_port))
                time.sleep(10)
                ret |= rescan_device(ports[ports.index(up_port)-1])
                bdf = update_bdf(up_port)
                if bdf:
                    (ports, _) = read_root_ports(os.path.join(
                                                        '/sys/bus/pci/drivers',
                                                        'intel-fpga-pci', bdf))
            for p in ports:
                enable_aer(p)
        else:
            print "FPGA is not found @ {}".format(bdf)
            ret = 1
    else:
        print "FPGA with device id {:04x} is not found @ {}".format(VCP_ID,
                                                                    bdf)
        ret = 1
    release_rsu_lock()
    return ret


def fpgaflash_in_progress():
    bdfs = []
    for fpga in glob.glob('/sys/class/fpga/*'):
        bdf = os.path.basename(os.readlink(os.path.join(fpga, "device")))
        if not bdf:
            continue
        if int(get_devid(bdf), 16) == VCP_ID:
            if get_flash_mode(bdf):
                bdfs.append(bdf)
    return bdfs


def main():
    args = parse_args()

    bdf = args.bdf

    if args.type == 'rsu':
        if bdf:
            ret = do_rsu(bdf, USER_BOOT_PAGE)
        else:
            print "Must specify bdf of FPGA in the board"
            ret = 1
        sys.exit(ret)
    elif args.type == 'eeprom':
        if bdf:
            try:
                ret = eeprom_update(args.file, normalize_bdf(bdf))
            except Exception as ex:
                print ex
                ret = 1
        else:
            print "Must specify bdf of FPGA which eeprom connects to"
            ret = 1
        sys.exit(ret)

    bdfs_in_progress = fpgaflash_in_progress()

    if not bdf:
        bdf_map = get_bdf_mtd_mapping(args.type)
        if len(bdf_map) == 0:
            print "No flash device found for FPGA"
            sys.exit(1)
        if len(bdf_map) == 1:
            bdf = bdf_map.keys()[0]
        else:
            for key in bdf_map.keys():
                if key not in bdfs_in_progress:
                    disable_mtd(key)
            print "Must specify a bdf. More than one device found."
            print_bdf_mtd_mapping(bdf_map)
    else:
        bdf = normalize_bdf(bdf)
        if not bdf:
            print "{} is an invalid bdf".format(args.bdf)
            sys.exit(1)
        else:
            bdf_map = get_bdf_mtd_mapping(args.type, bdf)
            if len(bdf_map) == 0:
                print "No flash device found for FPGA"
                sys.exit(1)
            if len(bdf_map) > 1:
                print "ERROR: multiple flash devices found for FPGA"
                sys.exit(1)

    if bdf in bdfs_in_progress:
        print "fpgaflash on {} is in progress, please try later".format(bdf)
        sys.exit(1)

    if (args.type == 'bmc_bl') or (args.type == 'bmc_app'):
        ret = bmc_update(args.type, args.file, bdf)
    else:
        try:
            ret = fpga_update(args.type, args.file, bdf, bdf_map,
                              args.no_verify)
        except Exception as ex:
            print ex
            ret = 1

    disable_mtd(bdf)

    # RSU procedure
    if ret == 0 and args.rsu and args.type in ['factory', 'user', 'bmc_img']:
        ret = do_rsu(bdf, USER_BOOT_PAGE)

    sys.exit(ret)


if __name__ == "__main__":
    main()
