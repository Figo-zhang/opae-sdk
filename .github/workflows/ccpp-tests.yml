name: C/C++ CI Build and Test

on:
  push:
    branches: [master]
    paths-ignore:
      - 'python/**'
      - 'tools/extra/fpgabist/**'
      - 'tools/extra/packager/*.py'
      - 'tools/extra/packager/metadata/**'
      - 'tools/extra/packager/test/*.py'
      - 'tools/extra/pac_hssi_config/*.py'
      - 'tools/extra/fpgadiag/**'
      - 'tools/utilities/**'
      - 'scripts/*.py'
      - 'platforms/scripts/platmgr/**'
      - '.github/workflows/python-static-analysis.yml'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'python/**'
      - 'tools/extra/fpgabist/**'
      - 'tools/extra/packager/*.py'
      - 'tools/extra/packager/metadata/**'
      - 'tools/extra/packager/test/*.py'
      - 'tools/extra/pac_hssi_config/*.py'
      - 'tools/extra/fpgadiag/**'
      - 'tools/utilities/**'
      - 'scripts/*.py'
      - 'platforms/scripts/platmgr/**'
      - '.github/workflows/python-static-analysis.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [Debug, Release, RelWithDebInfo, Coverage]
    steps:
    - uses: actions/checkout@v2
    - name: update
      run: sudo apt-get update -y
    - name: Get Packages
      uses: mstksg/get-package@v1
      with:
        apt-get: uuid-dev libjson-c-dev libhwloc-dev libtbb-dev
    - name: make build dir
      run: mkdir ${{ github.workspace }}/.build
    - name: configure ${{ matrix.build-type }}
      working-directory: ${{ github.workspace }}/.build
      run: cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
    - name: configure tests for Coverage
      if: ${{ matrix.build-type == 'Coverage' }}
      working-directory: ${{ github.workspace }}/.build
      run : cmake . -DOPAE_PYTHON_VERSION=3.6 -DOPAE_BUILD_LIBOPAE_CXX=ON -DOPAE_BUILD_LIBOPAE_PY=ON -DOPAE_BUILD_TESTS=ON -DOPAE_BUILD_SIM=OFF -DOPAE_ENABLE_MOCK=ON
    - name: make ${{ matrix.build-type }}
      working-directory: ${{ github.workspace }}/.build
      run: make -j $(nproc)
    - name: upload build
      if: ${{ matrix.build-type == 'Coverage' }}
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: ${{ github.workspace }}/.build
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
    - name: update
      run: sudo apt-get update -y
    - name: Get Packages
      uses: mstksg/get-package@v1
      with:
        apt-get: uuid libjson-c-dev libhwloc5 lcov libtbb2
    - name: set hugepages
      run: sudo sysctl -w vm.nr_hugepages=8
    - name: run unit tests
      env:
        LD_LIBRARY_PATH: ${{ github.workspace }}/.build/lib
        OPAE_EXPLICIT_INITIALIZE: 1
        CTEST_OUTPUT_ON_FAILURE: 1
      working-directory: ${{ github.workspace }}/.build
      run: |
        lcov --directory . --zerocounters
        lcov -c -i -d . -o coverage.base 2> /dev/null
        ctest -j 4 --timeout 180
        find . \( -iname "*.gcda" -or -iname "*.gcno" \) -exec chmod 664 '{}' \;
        lcov --directory . --capture --output-file coverage.info 2> /dev/null
        lcov -a coverage.base -a coverage.info --output-file coverage.total
        lcov --remove coverage.total '/usr/**' '*external/opae-test/**' '*opae-libs/libopaecxx/samples/**' '*opae-libs/tests/**' '*opae-libs/pyopae/**' '*opae-libs/plugins/xfpga/usrclk/**' '*tests/**' '*tools/extra/c++utils/**' '*tools/extra/mmlink/**' '*tools/extra/fpgabist/**' '*tools/extra/fpgadiag/**' '*pybind11/**' '*external/CLI11/**' '*external/spdlog/**' --output-file coverage.info.cleaned

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ${{ github.workspace }}/build/coverage.info.cleaned
